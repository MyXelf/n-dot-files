" vimrc file
"
" ----------------------------------------------------------------------------------------------------------------------
"  Global Configuration
" ----------------------------------------------------------------------------------------------------------------------

" Ve IMproved
set nocompatible

" Change all Leaders to <SPACE>
let mapleader = " "
let maplocalleader = " "

" Change the time used to wait for user input on mappings
set timeoutlen=500

" Better search
set hlsearch
set ignorecase
set smartcase
set incsearch

" Allow unsaved buffers to be put in the background
set hidden

" Put a $ at the end instead of just deleting the text and replacing it
" set cpoptions+=$

" Lines to keep on top and bottom on scroll
set scrolloff=2

" Allow the cursor to go in to 'invalid' places
" set virtualedit=all

" History size
set history=1000

" Relative number lines instead of absolute
" set relativenumber

" ----------------------------------------------------------------------------------------------------------------------
"  Formatting
" ----------------------------------------------------------------------------------------------------------------------

" Turn on syntax highlighting
syntax on

" Dark background
" set background=dark
highlight Comment ctermfg=LightBlue

" Set the terminal number of colors
if &term=="xterm"
  set t_Co=8
  " set t_Co=16
  " set t_Co=256
  " set t_Sb=^[[4%dm
  " set t_Sf=^[[3%dm
endif

" Turn on LineNumber
" set number

" Turn off automatic file type detection (will be activated at the end)
filetype off

" Tabs
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set smarttab

" Wrap lines at convenient points
set linebreak

" No wrap by default
set nowrap

" Allow backspacing over everything in Insert mode
set backspace=indent,eol,start

" Enable autoindent
" set autoindent
" set smartindent

" Characters to use in List mode
set listchars=eol:◊,tab:→\ ,trail:۰,extends:»,precedes:«,nbsp:●

" Keywords
set iskeyword+=-

" ----------------------------------------------------------------------------------------------------------------------
"  Visual
" ----------------------------------------------------------------------------------------------------------------------

" Use wildmenu for better command-line completion
set wildmenu

" Command line completion
set wildmode=longest:full,full

" Insert mode completion
set completeopt=menu,longest,preview

" Display incomplete commands
set showcmd

" Show current mode
set showmode

" Always show the status line
set laststatus=2

" Status line format
set statusline=%<%f
set statusline+=\ %m\ %R%H\ %#StatusLineWarn#%{Warn_Extra_Whitespace()}%{Warn_Extra_Tab()}%*
set statusline+=\ %=%-9(%03b-0x%02B%)
set statusline+=\ B#%-1n
set statusline+=\ [%{&ff}%{&fenc!=''?'.'.&fenc:''}%{&ft!=''?'.'.&ft:''}]
set statusline+=\ \ %10(%4l:%c%V%)\ [%LL\ -\ %P]

" ----------------------------------------------------------------------------------------------------------------------
"  Windows
" ----------------------------------------------------------------------------------------------------------------------

" Split windows to below and right
set splitbelow splitright

" Filling chars
set fillchars=stl:\ ,stlnc:\ ,vert:\ ,fold:\ ,diff:-

" ----------------------------------------------------------------------------------------------------------------------
"  Global Mappings
" ----------------------------------------------------------------------------------------------------------------------

" Wrapped lines goes down/up to next row, rather than next line in file
nnoremap j gj
nnoremap k gk

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" ----------------------------------------------------------------------------------------------------------------------
"  Global Abbreviations
" ----------------------------------------------------------------------------------------------------------------------

ab <expr> dn strftime('%d.%b.%Y')
ab        dt yyyy.mm.dd

" ----------------------------------------------------------------------------------------------------------------------
"  Leader Mappings
" ----------------------------------------------------------------------------------------------------------------------

" Edit the vimrc file
map <silent> <leader>ev     :e $MYVIMRC<CR>

" Source the vimrc file
map <silent> <leader>sv     :source $MYVIMRC<CR>

" Close current window / tab
map <silent> <leader>q      :close \| :wincmd p<CR>
map <silent> <leader>Q      :tabclose<CR>

" Toggle Highlighting
map <silent> <leader>th     :set hlsearch! \| call Echo('Search Highlight: '. (&hlsearch ? 'Yes' : 'No'))<CR>

" Toggle List mode
map <silent> <leader>tl     :set list! \| call Echo('List Mode: ' . (&list ? 'Yes' : 'No'))<CR>

" Toggle Highlight Extra Characters
map <silent> <leader>ts     /\s\+$<CR>
map <silent> <leader>tt     /\t\+<CR>

" Toggle Wrap
map <silent> <leader>tw     :set wrap! \| call Echo('Text Wrap: ' . (&wrap ? 'Yes' : 'No'))<CR>

" Toggle Folding Mode
map <silent> <leader>tf     :call Toggle_Folding_Mode()<CR>
nmap <silent> , za
vmap <silent> , za

" Go to the Quickfix window
nmap <silent> <leader>gq    :cwindow 5<CR>

" Go to the Location window
nmap <silent> <leader>gl    :lclose \| lopen 5<CR>

" Split line (opposite to S-J joining line)
nnoremap <silent> <C-J>     gEa<CR><ESC>ew

" Return the syntax highlighting group under the cursor
nmap <silent> <leader><F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") .'> trans<'. synIDattr(synID(line("."),col("."),0),"name") ."> lo<". synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") .">"<CR>

" Strip all trailing whitespace
nmap <silent> <leader>W     :silent! %s/\s\+$// \| let @/='' \| call Echo('Trailing Whitespace stripped')<CR>

" ----------------------------------------------------------------------------------------------------------------------
"  Auto Commands
" ----------------------------------------------------------------------------------------------------------------------

" VIM RC {{
augroup vimrc
  autocmd!
  autocmd BufWritePost                .vimrc          source $MYVIMRC
augroup end
" }}

" Warn about Extra Characters {{
  autocmd CursorHold,BufWritePost     *               unlet! b:warn_extra_whitespace
  autocmd CursorHold,BufWritePost     *               unlet! b:warn_extra_tab
" }}

" Open Help Files in a Vertical Split {{
  autocmd BufWinEnter                 *.txt           if &ft == 'help' | wincmd L | endif
" }}

" Jump to Last Known Position {{
  autocmd BufWinEnter                  *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   execute "normal! g`\"" |
    \   execute "normal! zz" |
    \   execute "normal! zv" |
    \ endif
" }}

" External Command Execution Example {{
  " augroup mainqml
  " autocmd!
  " autocmd BufWritePost                main.qml          execute 'silent !sudo restart lightdm >/dev/null 2>&1 &'
  " autocmd BufWritePost                main.qml          execute 'silent !pkill -9 Xephyr'
  " augroup end
" }}

" ----------------------------------------------------------------------------------------------------------------------
"  Commands
" ----------------------------------------------------------------------------------------------------------------------

" Write the file as Superuser
" command W! w !sudo tee % >/dev/null

" ----------------------------------------------------------------------------------------------------------------------
"  Functions
" ----------------------------------------------------------------------------------------------------------------------

" Echo with Highlighting {{
"
function! Echo(message)
  echohl ModeMsg | echo '--' a:message '--' | echohl None
endfunction
" }}

" Toggle string option value {{
"
function! Toggle_StringOption(option, value)
  execute 'set '. a:option . eval('&'. a:option .' =~ "'. a:value . '" ? "-=" : "+="') . a:value
endfunction
" }}

" Warn about Extra Whitespace {{
"
function! Warn_Extra_Whitespace()
  if !exists('b:warn_extra_whitespace')
  let b:warn_extra_whitespace = &modifiable && search('\s\+$', 'nw') != 0 ? '[$]' : ''
    endif
  return b:warn_extra_whitespace
endfunction
" }}

" Warn about Tab while ExpandTab {{
"
function! Warn_Extra_Tab()
  if !exists('b:warn_extra_tab')
    let b:warn_extra_tab = &modifiable && &expandtab && search('\t\+', 'nw') != 0 ? '[→]' : ''
  endif
  return b:warn_extra_tab
endfunction
" }}

" Toggle Folding Mode {{
"
function! Toggle_Folding_Mode()
  if !exists('b:toggle_folding_mode')
    let b:toggle_folding_mode = 1
    set foldenable
  else
    unlet! b:toggle_folding_mode
    set nofoldenable
    lclose
  endif
  call Echo('Toogle Folding Mode: ' . (exists('b:toggle_folding_mode') ? 'Enabled' : 'Disabled'))
endfunction
" }}

" ----------------------------------------------------------------------------------------------------------------------
"  Plugins Settings
" ----------------------------------------------------------------------------------------------------------------------

" Filetype :: Perl {{
  let perl_fold = 1
  let perl_fold_blocks = 1
  " let perl_fold_anonymous_subs = 1
  " let perl_nofold_subs = 1
  let perl_nofold_packages = 1
" }}

" Filetype :: Shell {{
  let g:is_bash = 1
  let g:sh_fold_enabled = 7
" }}

" Automatically detect file types (this is required by Vundle)
filetype plugin indent on

" ----------------------------------------------------------------------------------------------------------------------
"  Melange
" ----------------------------------------------------------------------------------------------------------------------

" vim: set tw=120 fdm=marker fmr={{,}} fdl=0:
